name: Android Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.html_url }}
      tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Get version from tag
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "VERSION=${TAG_NAME#v}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
          release_name: Release ${{ steps.get_version.outputs.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Create keystore.properties
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: |
          echo "keyAlias=$KEY_ALIAS" > keystore.properties
          echo "keyPassword=$KEY_PASSWORD" >> keystore.properties
          echo "storeFile=upload-keystore.jks" >> keystore.properties
          echo "storePassword=$STORE_PASSWORD" >> keystore.properties
          echo $KEYSTORE_BASE64 | base64 -d > app/upload-keystore.jks

      - name: Build release APK and Bundle
        run: ./gradlew assembleFreeRelease bundleFreeRelease

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/free/release/app-free-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB Bundle to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/bundle/freeRelease/app-free-release.aab
          asset_name: app-release.aab
          asset_content_type: application/octet-stream

  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: Find PR and Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the tag name from the release job
            const tagName = '${{ needs.release.outputs.tag_name }}';
            const releaseUrl = '${{ needs.release.outputs.release_url }}';

            // Find pull requests associated with this tag
            const query = `query {
              repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                refs(refPrefix: "refs/tags/", first: 1, query: "${tagName}") {
                  nodes {
                    target {
                      ... on Commit {
                        associatedPullRequests(first: 1) {
                          nodes {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            }`;

            try {
              const result = await github.graphql(query);
              const prs = result.repository.refs.nodes[0]?.target.associatedPullRequests.nodes;

              if (prs && prs.length > 0) {
                const prNumber = prs[0].number;
                console.log(`Found associated PR #${prNumber} for tag ${tagName}`);

                // Create comment with links to download APK and Bundle
                const message = `### ðŸ“± Release ${tagName} Available\n\n` +
                  `You can download the release artifacts from the [Release page](${releaseUrl}):\n\n` +
                  `- [Download APK](${releaseUrl}/download/app-release.apk)\n` +
                  `- [Download AAB Bundle](${releaseUrl}/download/app-release.aab)\n\n` +
                  `Thank you for your contribution!`;

                await github.rest.issues.createComment({
                  issue_number: prNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: message
                });

                console.log(`Comment added to PR #${prNumber}`);
              } else {
                console.log(`No associated PR found for tag ${tagName}`);
              }
            } catch (error) {
              console.error('Error finding PR or commenting:', error);
            }
